{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python 1.\u57fa\u672c\u8bed\u6cd5(https://www.runoob.com/python3/python3-basic-syntax.html\uff09 \u5b57\u7b26\u4e32\uff08string\uff09 \u200b python\u4e2d\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u3002 \u200b \u4f7f\u7528\u4e09\u5f15\u53f7( ''' \u6216 \"\"\" )\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u7b26 \u53cd\u659c\u6760\u53ef\u4ee5\u7528\u6765\u8f6c\u4e49\uff0c\u4f7f\u7528r\u53ef\u4ee5\u8ba9\u53cd\u659c\u6760\u4e0d\u53d1\u751f\u8f6c\u4e49\u3002\u3002 \u5982 r\"this is a line with \\n\" \u5219\\n\u4f1a\u663e\u793a\uff0c\u5e76\u4e0d\u662f\u6362\u884c\u3002 \u6309\u5b57\u9762\u610f\u4e49\u7ea7\u8054\u5b57\u7b26\u4e32\uff0c\u5982\"this \" \"is \" \"string\"\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3athis is string\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 + \u8fd0\u7b97\u7b26\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7528 * \u8fd0\u7b97\u7b26\u91cd\u590d\u3002 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u6709\u4e24\u79cd\u7d22\u5f15\u65b9\u5f0f\uff0c\u4ece\u5de6\u5f80\u53f3\u4ee5 0 \u5f00\u59cb\uff0c\u4ece\u53f3\u5f80\u5de6\u4ee5 -1 \u5f00\u59cb\u3002 Python\u4e2d\u7684\u5b57\u7b26\u4e32\u4e0d\u80fd\u6539\u53d8\u3002 Python \u6ca1\u6709\u5355\u72ec\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u4e00\u4e2a\u5b57\u7b26\u5c31\u662f\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u7684\u622a\u53d6\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a \u53d8\u91cf[\u5934\u4e0b\u6807:\u5c3e\u4e0b\u6807:\u6b65\u957f] word = '\u5b57\u7b26\u4e32' sentence = \"\u8fd9\u662f\u4e00\u4e2a\u53e5\u5b50\u3002\" paragraph = \"\"\"\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c \u53ef\u4ee5\u7531\u591a\u884c\u7ec4\u6210\"\"\" print \u8f93\u51fa print \u9ed8\u8ba4\u8f93\u51fa\u662f\u6362\u884c\u7684\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4e0d\u6362\u884c\u9700\u8981\u5728\u53d8\u91cf\u672b\u5c3e\u52a0\u4e0a end=\"\" import \u4e0e from...import \u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757(somemodule)\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a import somemodule \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import firstfunc, secondfunc, thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a from somemodule import * 2.\u57fa\u672c\u6570\u636e\u7c7b\u578b \u6807\u51c6\u6570\u636e\u7c7b\u578b Python3 \u4e2d\u6709\u516d\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Number\uff08\u6570\u5b57\uff09 String\uff08\u5b57\u7b26\u4e32\uff09 List\uff08\u5217\u8868\uff09 Tuple\uff08\u5143\u7ec4\uff09 Set\uff08\u96c6\u5408\uff09 Dictionary\uff08\u5b57\u5178\uff09 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number\uff08\u6570\u5b57\uff09\u3001String\uff08\u5b57\u7b26\u4e32\uff09\u3001Tuple\uff08\u5143\u7ec4\uff09\uff1b \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List\uff08\u5217\u8868\uff09\u3001Dictionary\uff08\u5b57\u5178\uff09\u3001Set\uff08\u96c6\u5408) del\u8bed\u53e5\u5220\u9664 \u5f53\u4f60\u6307\u5b9a\u4e00\u4e2a\u503c\u65f6\uff0cNumber \u5bf9\u8c61\u5c31\u4f1a\u88ab\u521b\u5efa\uff1a var1 = 1 var2 = 10 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528del\u8bed\u53e5\u5220\u9664\u4e00\u4e9b\u5bf9\u8c61\u5f15\u7528\u3002 del\u8bed\u53e5\u7684\u8bed\u6cd5\u662f\uff1a del var1[,var2[,var3[....,varN]]] \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528del\u8bed\u53e5\u5220\u9664\u5355\u4e2a\u6216\u591a\u4e2a\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a del var del var_a, var_b \u53d8\u91cf\u7c7b\u578b\u67e5\u8be2type\uff08\uff09\u548cisinstance\uff08\uff09 \u5185\u7f6e\u7684 type() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u53d8\u91cf\u6240\u6307\u7684\u5bf9\u8c61\u7c7b\u578b\u3002 ``` a, b, c, d = 20, 5.5, True, 4+3j print(type(a), type(b), type(c), type(d)) ``` \u6b64\u5916\u8fd8\u53ef\u4ee5\u7528 isinstance \u6765\u5224\u65ad\uff1a >>> a = 111 >>> isinstance(a, int) True >>> isinstance()\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u4f46\u662ftype\uff08\uff09\u4e0d\u4f1a\u3002 \u6ce8\u610f\uff1a Python3 \u4e2d\uff0cbool \u662f int \u7684\u5b50\u7c7b\uff0cTrue \u548c False \u53ef\u4ee5\u548c\u6570\u5b57\u76f8\u52a0\uff0c True==1\u3001False==0 \u4f1a\u8fd4\u56de True \uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 is \u6765\u5224\u65ad\u7c7b\u578b\u3002 ``` issubclass(bool, int) True True==1 True False==0 True True+1 2 False+1 1 1 is True False 0 is False False ``` \u5728 Python2 \u4e2d\u662f\u6ca1\u6709\u5e03\u5c14\u578b\u7684\uff0c\u5b83\u7528\u6570\u5b57 0 \u8868\u793a False\uff0c\u7528 1 \u8868\u793a True\u3002 \u6570\u503c\u8fd0\u7b97 \u5b9e\u4f8b >>> 5 + 4 # \u52a0\u6cd5 9 >>> 4.3 - 2 # \u51cf\u6cd5 2.3 >>> 3 * 7 # \u4e58\u6cd5 21 >>> 2 / 4 # \u9664\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570 0.5 >>> 2 // 4 # \u9664\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u6574\u6570 0 >>> 17 % 3 # \u53d6\u4f59 2 >>> 2 ** 5 # \u4e58\u65b9 32 \u6ce8\u610f\uff1a\u5982\u679c\u662f\u5206\u5b50\u6216\u8005\u5206\u6bcd\u662f\u6d6e\u70b9\u7c7b\u578b\uff0c\u90a3\u5f97\u5230\u7ed3\u679c\u4e5f\u662f\u6d6e\u70b9\u7c7b\u578b 3.\u51fd\u6570\u7c7b\u578b \u51fd\u6570 \u8fd4\u56de\u503c ( \u63cf\u8ff0 ) abs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u5982abs(-10) \u8fd4\u56de 10 ceil(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0a\u5165\u6574\u6570\uff0c\u5982math.ceil(4.1) \u8fd4\u56de 5 cmp(x, y) \u5982\u679c x < y \u8fd4\u56de -1, \u5982\u679c x == y \u8fd4\u56de 0, \u5982\u679c x > y \u8fd4\u56de 1\u3002 Python 3 \u5df2\u5e9f\u5f03\uff0c\u4f7f\u7528 (x>y)-(x<y) \u66ff\u6362 \u3002 exp(x) \u8fd4\u56dee\u7684x\u6b21\u5e42(ex),\u5982math.exp(1) \u8fd4\u56de2.718281828459045 fabs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u5982math.fabs(-10) \u8fd4\u56de10.0 floor(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0b\u820d\u6574\u6570\uff0c\u5982math.floor(4.9)\u8fd4\u56de 4 log(x) \u5982math.log(math.e)\u8fd4\u56de1.0,math.log(100,10)\u8fd4\u56de2.0 log10(x) \u8fd4\u56de\u4ee510\u4e3a\u57fa\u6570\u7684x\u7684\u5bf9\u6570\uff0c\u5982math.log10(100)\u8fd4\u56de 2.0 max(x1, x2,...) \u8fd4\u56de\u7ed9\u5b9a\u53c2\u6570\u7684\u6700\u5927\u503c\uff0c\u53c2\u6570\u53ef\u4ee5\u4e3a\u5e8f\u5217\u3002 min(x1, x2,...) \u8fd4\u56de\u7ed9\u5b9a\u53c2\u6570\u7684\u6700\u5c0f\u503c\uff0c\u53c2\u6570\u53ef\u4ee5\u4e3a\u5e8f\u5217\u3002 modf(x) \u8fd4\u56dex\u7684\u6574\u6570\u90e8\u5206\u4e0e\u5c0f\u6570\u90e8\u5206\uff0c\u4e24\u90e8\u5206\u7684\u6570\u503c\u7b26\u53f7\u4e0ex\u76f8\u540c\uff0c\u6574\u6570\u90e8\u5206\u4ee5\u6d6e\u70b9\u578b\u8868\u793a\u3002 pow(x, y) x**y \u8fd0\u7b97\u540e\u7684\u503c\u3002 [round(x ,n]) \u8fd4\u56de\u6d6e\u70b9\u6570 x \u7684\u56db\u820d\u4e94\u5165\u503c\uff0c\u5982\u7ed9\u51fa n \u503c\uff0c\u5219\u4ee3\u8868\u820d\u5165\u5230\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002 \u5176\u5b9e\u51c6\u786e\u7684\u8bf4\u662f\u4fdd\u7559\u503c\u5c06\u4fdd\u7559\u5230\u79bb\u4e0a\u4e00\u4f4d\u66f4\u8fd1\u7684\u4e00\u7aef\u3002 sqrt(x) \u8fd4\u56de\u6570\u5b57x\u7684\u5e73\u65b9\u6839\u3002 \u968f\u673a\u6570\u51fd\u6570 \u968f\u673a\u6570\u53ef\u4ee5\u7528\u4e8e\u6570\u5b66\uff0c\u6e38\u620f\uff0c\u5b89\u5168\u7b49\u9886\u57df\u4e2d\uff0c\u8fd8\u7ecf\u5e38\u88ab\u5d4c\u5165\u5230\u7b97\u6cd5\u4e2d\uff0c\u7528\u4ee5\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\uff0c\u5e76\u63d0\u9ad8\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u3002 Python\u5305\u542b\u4ee5\u4e0b\u5e38\u7528\u968f\u673a\u6570\u51fd\u6570\uff1a \u51fd\u6570 \u63cf\u8ff0 choice(seq) \u4ece\u5e8f\u5217\u7684\u5143\u7d20\u4e2d\u968f\u673a\u6311\u9009\u4e00\u4e2a\u5143\u7d20\uff0c\u6bd4\u5982random.choice(range(10))\uff0c\u4ece0\u52309\u4e2d\u968f\u673a\u6311\u9009\u4e00\u4e2a\u6574\u6570\u3002 [randrange ( start,] stop [,step]) \u4ece\u6307\u5b9a\u8303\u56f4\u5185\uff0c\u6309\u6307\u5b9a\u57fa\u6570\u9012\u589e\u7684\u96c6\u5408\u4e2d\u83b7\u53d6\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u57fa\u6570\u9ed8\u8ba4\u503c\u4e3a 1 random() \u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[0,1)\u8303\u56f4\u5185\u3002 [seed( x]) \u6539\u53d8\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50seed\u3002\u5982\u679c\u4f60\u4e0d\u4e86\u89e3\u5176\u539f\u7406\uff0c\u4f60\u4e0d\u5fc5\u7279\u522b\u53bb\u8bbe\u5b9aseed\uff0cPython\u4f1a\u5e2e\u4f60\u9009\u62e9seed\u3002 shuffle(lst) \u5c06\u5e8f\u5217\u7684\u6240\u6709\u5143\u7d20\u968f\u673a\u6392\u5e8f uniform(x, y) \u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[x,y]\u8303\u56f4\u5185\u3002 \u4e09\u89d2\u51fd\u6570 Python\u5305\u62ec\u4ee5\u4e0b\u4e09\u89d2\u51fd\u6570\uff1a \u51fd\u6570 \u63cf\u8ff0 acos(x) \u8fd4\u56dex\u7684\u53cd\u4f59\u5f26\u5f27\u5ea6\u503c\u3002 asin(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5f26\u5f27\u5ea6\u503c\u3002 atan(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5207\u5f27\u5ea6\u503c\u3002 atan2(y, x) \u8fd4\u56de\u7ed9\u5b9a\u7684 X \u53ca Y \u5750\u6807\u503c\u7684\u53cd\u6b63\u5207\u503c\u3002 cos(x) \u8fd4\u56dex\u7684\u5f27\u5ea6\u7684\u4f59\u5f26\u503c\u3002 hypot(x, y) \u8fd4\u56de\u6b27\u51e0\u91cc\u5fb7\u8303\u6570 sqrt(x x + y y)\u3002 sin(x) \u8fd4\u56de\u7684x\u5f27\u5ea6\u7684\u6b63\u5f26\u503c\u3002 tan(x) \u8fd4\u56dex\u5f27\u5ea6\u7684\u6b63\u5207\u503c\u3002 degrees(x) \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6,\u5982degrees(math.pi/2) \uff0c \u8fd4\u56de90.0 radians(x) \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6 \u6570\u5b66\u5e38\u91cf \u5e38\u91cf \u63cf\u8ff0 pi \u6570\u5b66\u5e38\u91cf pi\uff08\u5706\u5468\u7387\uff0c\u4e00\u822c\u4ee5\u03c0\u6765\u8868\u793a\uff09 e \u6570\u5b66\u5e38\u91cf e\uff0ce\u5373\u81ea\u7136\u5e38\u6570\uff08\u81ea\u7136\u5e38\u6570\uff09\u3002 4.\u6570\u636e\u4e32 1.\u521b\u5efa\u65f6\u7528 '' \u6216\u8005 \"\" 2.\u7d22\u5f15\u3001\u622a\u53d6\u65f6\u7528 [\u5934\u4e0b\u6807\uff1a\u5c3e\u4e0b\u6807] ,\u4f46\u662f\u7d22\u5f15\u548c\u622a\u53d6\u65f6\u6570\u5b57\u987a\u5e8f\u4e0d\u540c\uff0c\u8fd8\u6709\u4ece\u524d\u622a\u53d6\u548c\u4ece\u540e\u622a\u53d6\u7684\u95ee\u9898\u3002 \u51fd\u6570\u7528\u6cd5 str.replace():\u5b57\u7b26\u4e32\u66ff\u6362 replace(self, old, new, count=-1, /) old\uff0c\u65e7\u5b57\u7b26\u6216\u5b57\u7b26\u4e32 new\uff0c\u65b0\u5b57\u7b26\u6216\u5b57\u7b26\u4e32 count\uff0c\u6700\u5927\u66ff\u6362\u6570\uff0c\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u8ba1\u6570\uff0c\u9ed8\u8ba4\u66ff\u6362\u6240\u6709\uff08\u662f\u9ed8\u8ba4\u503c\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a-1\uff0c\u5f53\u7136\uff0c-99\u4e5f\u53ef\u4ee5\uff09 \u6ce8\u610f\uff1areplace\u65b9\u6cd5\u66ff\u6362\u5b57\u7b26\u4e32\uff0c\u4e0d\u5f71\u54cd\u539f\u5b57\u7b26\u4e32\uff08\u5373\u66ff\u6362\u4e0d\u7b49\u4e8e\u6539\u53d8\uff09 math.factorial() \u8fd4\u56de\u6240\u9700\u6570\u5b57\u7684\u9636\u4e58\u3002 getPrime(n) \u968f\u673a\u8fd4\u56de\u4e00\u4e2an\u4f4d\u7d20\u6570\u3002 append() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 \u53ef\u5c06\u5143\u7d20\u52a0\u5230\u5217\u8868\u4e2d\u3002 ``` animals = ['cat', 'dog', 'rabbit'] animals.append('guinea pig') print('Updated animals list: ', animals) ``` \u4e5f\u53ef\u5c06\u5217\u8868\u52a0\u5230\u5217\u8868\u4e2d\u3002 ``` animals = ['cat', 'dog', 'rabbit'] wild_animals = ['tiger', 'fox'] animals.append(wild_animals) print('Updated animals list: ', animals) ``` gmpy2\u7528\u6cd5 mpz\uff08\uff09\u521d\u59cb\u5316\u5927\u6574\u6570\u3002 sympy.nextprime() \u51fd\u6570\u83b7\u53d6\u7ed9\u5b9a\u6570\u5b57 n \u7684\u4e0b\u4e00\u4e2a\u8d28\u6570\u3002 gmpy2.mpfr(x)# \u521d\u59cb\u5316\u4e00\u4e2a\u9ad8\u7cbe\u5ea6\u6d6e\u70b9\u6570x d = gmpy2.invert(e,n) # \u6c42\u9006\u5143\uff0cde = 1 mod n C = gmpy2.powmod(M,e,n)# \u5e42\u53d6\u6a21\uff0c\u7ed3\u679c\u662f C = (M^e) mod n gmpy2.is_prime(n) #\u7d20\u6027\u68c0\u6d4b gmpy2.gcd(a,b) #\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff0c\u6700\u5927\u516c\u7ea6\u6570 gmpy2.gcdext(a,b) #\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 gmpy2.iroot(a,b) #a\u5f00b\u6b21\u6839 gmpy.root(a, b) \uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y) \uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0c y \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf if(y==1)\u5219x\u4e3a\u6574\u6570 \u5b9e\u9645\u5b66\u4e60\u4e2d\u95ee\u9898\uff1a 1.\u7f29\u8fdb\u3002\u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u7f29\u8fdb\u5fc5\u987b\u4e00\u81f4,\u9000\u51fa\u6539\u4ee3\u7801\u5757\u5c31\u9876\u683c\u3002 py flag = '' for i in range(0,len(key)): ch = chr(ord(sec[i])^ord(key[i])) flag + = ch print(flag) 2.\u5192\u53f7.\u8bb0\u5f97\u5728\u67d0\u547d\u4ee4\u540e\u52a0\u5192\u53f7,\u5982def main():for i in range ():\u8868\u793a\u5f00\u59cb\u67d0\u51fd\u6570\u6216\u4ee3\u7801\u5757 3.\u8bfb\u53d6\u6587\u4ef6\u67d0\u8def\u5f84\u62a5\u9519\u5565uncoiode \u89e3\u51b3\u529e\u6cd5\uff1a \u5728\u8def\u5f84\u524d\u9762\u52a0r\uff0c\u4fdd\u6301\u5b57\u7b26\u539f\u59cb\u503c\u3002 \u66ff\u6362\u4e3a\u53cc\u53cd\u659c\u6760(\\\\ )\u6216\u6b63\u659c\u6760(/)\u3002","title":"Python"},{"location":"#python","text":"","title":"Python"},{"location":"#1httpswwwrunoobcompython3python3-basic-syntaxhtml","text":"\u5b57\u7b26\u4e32\uff08string\uff09 \u200b python\u4e2d\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u3002 \u200b \u4f7f\u7528\u4e09\u5f15\u53f7( ''' \u6216 \"\"\" )\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u7b26 \u53cd\u659c\u6760\u53ef\u4ee5\u7528\u6765\u8f6c\u4e49\uff0c\u4f7f\u7528r\u53ef\u4ee5\u8ba9\u53cd\u659c\u6760\u4e0d\u53d1\u751f\u8f6c\u4e49\u3002\u3002 \u5982 r\"this is a line with \\n\" \u5219\\n\u4f1a\u663e\u793a\uff0c\u5e76\u4e0d\u662f\u6362\u884c\u3002 \u6309\u5b57\u9762\u610f\u4e49\u7ea7\u8054\u5b57\u7b26\u4e32\uff0c\u5982\"this \" \"is \" \"string\"\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3athis is string\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 + \u8fd0\u7b97\u7b26\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7528 * \u8fd0\u7b97\u7b26\u91cd\u590d\u3002 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u6709\u4e24\u79cd\u7d22\u5f15\u65b9\u5f0f\uff0c\u4ece\u5de6\u5f80\u53f3\u4ee5 0 \u5f00\u59cb\uff0c\u4ece\u53f3\u5f80\u5de6\u4ee5 -1 \u5f00\u59cb\u3002 Python\u4e2d\u7684\u5b57\u7b26\u4e32\u4e0d\u80fd\u6539\u53d8\u3002 Python \u6ca1\u6709\u5355\u72ec\u7684\u5b57\u7b26\u7c7b\u578b\uff0c\u4e00\u4e2a\u5b57\u7b26\u5c31\u662f\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u7684\u622a\u53d6\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a \u53d8\u91cf[\u5934\u4e0b\u6807:\u5c3e\u4e0b\u6807:\u6b65\u957f] word = '\u5b57\u7b26\u4e32' sentence = \"\u8fd9\u662f\u4e00\u4e2a\u53e5\u5b50\u3002\" paragraph = \"\"\"\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\uff0c \u53ef\u4ee5\u7531\u591a\u884c\u7ec4\u6210\"\"\" print \u8f93\u51fa print \u9ed8\u8ba4\u8f93\u51fa\u662f\u6362\u884c\u7684\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4e0d\u6362\u884c\u9700\u8981\u5728\u53d8\u91cf\u672b\u5c3e\u52a0\u4e0a end=\"\"","title":"1.\u57fa\u672c\u8bed\u6cd5(https://www.runoob.com/python3/python3-basic-syntax.html\uff09"},{"location":"#import-fromimport","text":"\u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757(somemodule)\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a import somemodule \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570,\u683c\u5f0f\u4e3a\uff1a from somemodule import firstfunc, secondfunc, thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165\uff0c\u683c\u5f0f\u4e3a\uff1a from somemodule import *","title":"import \u4e0e from...import"},{"location":"#2","text":"","title":"2.\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"#_1","text":"Python3 \u4e2d\u6709\u516d\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Number\uff08\u6570\u5b57\uff09 String\uff08\u5b57\u7b26\u4e32\uff09 List\uff08\u5217\u8868\uff09 Tuple\uff08\u5143\u7ec4\uff09 Set\uff08\u96c6\u5408\uff09 Dictionary\uff08\u5b57\u5178\uff09 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number\uff08\u6570\u5b57\uff09\u3001String\uff08\u5b57\u7b26\u4e32\uff09\u3001Tuple\uff08\u5143\u7ec4\uff09\uff1b \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List\uff08\u5217\u8868\uff09\u3001Dictionary\uff08\u5b57\u5178\uff09\u3001Set\uff08\u96c6\u5408)","title":"\u6807\u51c6\u6570\u636e\u7c7b\u578b"},{"location":"#del","text":"\u5f53\u4f60\u6307\u5b9a\u4e00\u4e2a\u503c\u65f6\uff0cNumber \u5bf9\u8c61\u5c31\u4f1a\u88ab\u521b\u5efa\uff1a var1 = 1 var2 = 10 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528del\u8bed\u53e5\u5220\u9664\u4e00\u4e9b\u5bf9\u8c61\u5f15\u7528\u3002 del\u8bed\u53e5\u7684\u8bed\u6cd5\u662f\uff1a del var1[,var2[,var3[....,varN]]] \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528del\u8bed\u53e5\u5220\u9664\u5355\u4e2a\u6216\u591a\u4e2a\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a del var del var_a, var_b","title":"del\u8bed\u53e5\u5220\u9664"},{"location":"#typeisinstance","text":"\u5185\u7f6e\u7684 type() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u53d8\u91cf\u6240\u6307\u7684\u5bf9\u8c61\u7c7b\u578b\u3002 ``` a, b, c, d = 20, 5.5, True, 4+3j print(type(a), type(b), type(c), type(d)) ``` \u6b64\u5916\u8fd8\u53ef\u4ee5\u7528 isinstance \u6765\u5224\u65ad\uff1a >>> a = 111 >>> isinstance(a, int) True >>> isinstance()\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u4f46\u662ftype\uff08\uff09\u4e0d\u4f1a\u3002 \u6ce8\u610f\uff1a Python3 \u4e2d\uff0cbool \u662f int \u7684\u5b50\u7c7b\uff0cTrue \u548c False \u53ef\u4ee5\u548c\u6570\u5b57\u76f8\u52a0\uff0c True==1\u3001False==0 \u4f1a\u8fd4\u56de True \uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 is \u6765\u5224\u65ad\u7c7b\u578b\u3002 ``` issubclass(bool, int) True True==1 True False==0 True True+1 2 False+1 1 1 is True False 0 is False False ``` \u5728 Python2 \u4e2d\u662f\u6ca1\u6709\u5e03\u5c14\u578b\u7684\uff0c\u5b83\u7528\u6570\u5b57 0 \u8868\u793a False\uff0c\u7528 1 \u8868\u793a True\u3002 \u6570\u503c\u8fd0\u7b97","title":"\u53d8\u91cf\u7c7b\u578b\u67e5\u8be2type\uff08\uff09\u548cisinstance\uff08\uff09"},{"location":"#_2","text":">>> 5 + 4 # \u52a0\u6cd5 9 >>> 4.3 - 2 # \u51cf\u6cd5 2.3 >>> 3 * 7 # \u4e58\u6cd5 21 >>> 2 / 4 # \u9664\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570 0.5 >>> 2 // 4 # \u9664\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u6574\u6570 0 >>> 17 % 3 # \u53d6\u4f59 2 >>> 2 ** 5 # \u4e58\u65b9 32 \u6ce8\u610f\uff1a\u5982\u679c\u662f\u5206\u5b50\u6216\u8005\u5206\u6bcd\u662f\u6d6e\u70b9\u7c7b\u578b\uff0c\u90a3\u5f97\u5230\u7ed3\u679c\u4e5f\u662f\u6d6e\u70b9\u7c7b\u578b","title":"\u5b9e\u4f8b"},{"location":"#3","text":"\u51fd\u6570 \u8fd4\u56de\u503c ( \u63cf\u8ff0 ) abs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u5982abs(-10) \u8fd4\u56de 10 ceil(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0a\u5165\u6574\u6570\uff0c\u5982math.ceil(4.1) \u8fd4\u56de 5 cmp(x, y) \u5982\u679c x < y \u8fd4\u56de -1, \u5982\u679c x == y \u8fd4\u56de 0, \u5982\u679c x > y \u8fd4\u56de 1\u3002 Python 3 \u5df2\u5e9f\u5f03\uff0c\u4f7f\u7528 (x>y)-(x<y) \u66ff\u6362 \u3002 exp(x) \u8fd4\u56dee\u7684x\u6b21\u5e42(ex),\u5982math.exp(1) \u8fd4\u56de2.718281828459045 fabs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u5982math.fabs(-10) \u8fd4\u56de10.0 floor(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0b\u820d\u6574\u6570\uff0c\u5982math.floor(4.9)\u8fd4\u56de 4 log(x) \u5982math.log(math.e)\u8fd4\u56de1.0,math.log(100,10)\u8fd4\u56de2.0 log10(x) \u8fd4\u56de\u4ee510\u4e3a\u57fa\u6570\u7684x\u7684\u5bf9\u6570\uff0c\u5982math.log10(100)\u8fd4\u56de 2.0 max(x1, x2,...) \u8fd4\u56de\u7ed9\u5b9a\u53c2\u6570\u7684\u6700\u5927\u503c\uff0c\u53c2\u6570\u53ef\u4ee5\u4e3a\u5e8f\u5217\u3002 min(x1, x2,...) \u8fd4\u56de\u7ed9\u5b9a\u53c2\u6570\u7684\u6700\u5c0f\u503c\uff0c\u53c2\u6570\u53ef\u4ee5\u4e3a\u5e8f\u5217\u3002 modf(x) \u8fd4\u56dex\u7684\u6574\u6570\u90e8\u5206\u4e0e\u5c0f\u6570\u90e8\u5206\uff0c\u4e24\u90e8\u5206\u7684\u6570\u503c\u7b26\u53f7\u4e0ex\u76f8\u540c\uff0c\u6574\u6570\u90e8\u5206\u4ee5\u6d6e\u70b9\u578b\u8868\u793a\u3002 pow(x, y) x**y \u8fd0\u7b97\u540e\u7684\u503c\u3002 [round(x ,n]) \u8fd4\u56de\u6d6e\u70b9\u6570 x \u7684\u56db\u820d\u4e94\u5165\u503c\uff0c\u5982\u7ed9\u51fa n \u503c\uff0c\u5219\u4ee3\u8868\u820d\u5165\u5230\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\u3002 \u5176\u5b9e\u51c6\u786e\u7684\u8bf4\u662f\u4fdd\u7559\u503c\u5c06\u4fdd\u7559\u5230\u79bb\u4e0a\u4e00\u4f4d\u66f4\u8fd1\u7684\u4e00\u7aef\u3002 sqrt(x) \u8fd4\u56de\u6570\u5b57x\u7684\u5e73\u65b9\u6839\u3002","title":"3.\u51fd\u6570\u7c7b\u578b"},{"location":"#_3","text":"\u968f\u673a\u6570\u53ef\u4ee5\u7528\u4e8e\u6570\u5b66\uff0c\u6e38\u620f\uff0c\u5b89\u5168\u7b49\u9886\u57df\u4e2d\uff0c\u8fd8\u7ecf\u5e38\u88ab\u5d4c\u5165\u5230\u7b97\u6cd5\u4e2d\uff0c\u7528\u4ee5\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\uff0c\u5e76\u63d0\u9ad8\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u3002 Python\u5305\u542b\u4ee5\u4e0b\u5e38\u7528\u968f\u673a\u6570\u51fd\u6570\uff1a \u51fd\u6570 \u63cf\u8ff0 choice(seq) \u4ece\u5e8f\u5217\u7684\u5143\u7d20\u4e2d\u968f\u673a\u6311\u9009\u4e00\u4e2a\u5143\u7d20\uff0c\u6bd4\u5982random.choice(range(10))\uff0c\u4ece0\u52309\u4e2d\u968f\u673a\u6311\u9009\u4e00\u4e2a\u6574\u6570\u3002 [randrange ( start,] stop [,step]) \u4ece\u6307\u5b9a\u8303\u56f4\u5185\uff0c\u6309\u6307\u5b9a\u57fa\u6570\u9012\u589e\u7684\u96c6\u5408\u4e2d\u83b7\u53d6\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u57fa\u6570\u9ed8\u8ba4\u503c\u4e3a 1 random() \u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[0,1)\u8303\u56f4\u5185\u3002 [seed( x]) \u6539\u53d8\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50seed\u3002\u5982\u679c\u4f60\u4e0d\u4e86\u89e3\u5176\u539f\u7406\uff0c\u4f60\u4e0d\u5fc5\u7279\u522b\u53bb\u8bbe\u5b9aseed\uff0cPython\u4f1a\u5e2e\u4f60\u9009\u62e9seed\u3002 shuffle(lst) \u5c06\u5e8f\u5217\u7684\u6240\u6709\u5143\u7d20\u968f\u673a\u6392\u5e8f uniform(x, y) \u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[x,y]\u8303\u56f4\u5185\u3002","title":"\u968f\u673a\u6570\u51fd\u6570"},{"location":"#_4","text":"Python\u5305\u62ec\u4ee5\u4e0b\u4e09\u89d2\u51fd\u6570\uff1a \u51fd\u6570 \u63cf\u8ff0 acos(x) \u8fd4\u56dex\u7684\u53cd\u4f59\u5f26\u5f27\u5ea6\u503c\u3002 asin(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5f26\u5f27\u5ea6\u503c\u3002 atan(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5207\u5f27\u5ea6\u503c\u3002 atan2(y, x) \u8fd4\u56de\u7ed9\u5b9a\u7684 X \u53ca Y \u5750\u6807\u503c\u7684\u53cd\u6b63\u5207\u503c\u3002 cos(x) \u8fd4\u56dex\u7684\u5f27\u5ea6\u7684\u4f59\u5f26\u503c\u3002 hypot(x, y) \u8fd4\u56de\u6b27\u51e0\u91cc\u5fb7\u8303\u6570 sqrt(x x + y y)\u3002 sin(x) \u8fd4\u56de\u7684x\u5f27\u5ea6\u7684\u6b63\u5f26\u503c\u3002 tan(x) \u8fd4\u56dex\u5f27\u5ea6\u7684\u6b63\u5207\u503c\u3002 degrees(x) \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6,\u5982degrees(math.pi/2) \uff0c \u8fd4\u56de90.0 radians(x) \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6","title":"\u4e09\u89d2\u51fd\u6570"},{"location":"#_5","text":"\u5e38\u91cf \u63cf\u8ff0 pi \u6570\u5b66\u5e38\u91cf pi\uff08\u5706\u5468\u7387\uff0c\u4e00\u822c\u4ee5\u03c0\u6765\u8868\u793a\uff09 e \u6570\u5b66\u5e38\u91cf e\uff0ce\u5373\u81ea\u7136\u5e38\u6570\uff08\u81ea\u7136\u5e38\u6570\uff09\u3002","title":"\u6570\u5b66\u5e38\u91cf"},{"location":"#4","text":"1.\u521b\u5efa\u65f6\u7528 '' \u6216\u8005 \"\" 2.\u7d22\u5f15\u3001\u622a\u53d6\u65f6\u7528 [\u5934\u4e0b\u6807\uff1a\u5c3e\u4e0b\u6807] ,\u4f46\u662f\u7d22\u5f15\u548c\u622a\u53d6\u65f6\u6570\u5b57\u987a\u5e8f\u4e0d\u540c\uff0c\u8fd8\u6709\u4ece\u524d\u622a\u53d6\u548c\u4ece\u540e\u622a\u53d6\u7684\u95ee\u9898\u3002","title":"4.\u6570\u636e\u4e32"},{"location":"#_6","text":"","title":"\u51fd\u6570\u7528\u6cd5"},{"location":"#strreplace","text":"replace(self, old, new, count=-1, /) old\uff0c\u65e7\u5b57\u7b26\u6216\u5b57\u7b26\u4e32 new\uff0c\u65b0\u5b57\u7b26\u6216\u5b57\u7b26\u4e32 count\uff0c\u6700\u5927\u66ff\u6362\u6570\uff0c\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u8ba1\u6570\uff0c\u9ed8\u8ba4\u66ff\u6362\u6240\u6709\uff08\u662f\u9ed8\u8ba4\u503c\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a-1\uff0c\u5f53\u7136\uff0c-99\u4e5f\u53ef\u4ee5\uff09 \u6ce8\u610f\uff1areplace\u65b9\u6cd5\u66ff\u6362\u5b57\u7b26\u4e32\uff0c\u4e0d\u5f71\u54cd\u539f\u5b57\u7b26\u4e32\uff08\u5373\u66ff\u6362\u4e0d\u7b49\u4e8e\u6539\u53d8\uff09","title":"str.replace():\u5b57\u7b26\u4e32\u66ff\u6362"},{"location":"#mathfactorial","text":"","title":"math.factorial()\u8fd4\u56de\u6240\u9700\u6570\u5b57\u7684\u9636\u4e58\u3002"},{"location":"#getprimenn","text":"","title":"getPrime(n)\u968f\u673a\u8fd4\u56de\u4e00\u4e2an\u4f4d\u7d20\u6570\u3002"},{"location":"#append","text":"\u53ef\u5c06\u5143\u7d20\u52a0\u5230\u5217\u8868\u4e2d\u3002 ``` animals = ['cat', 'dog', 'rabbit'] animals.append('guinea pig') print('Updated animals list: ', animals) ``` \u4e5f\u53ef\u5c06\u5217\u8868\u52a0\u5230\u5217\u8868\u4e2d\u3002 ``` animals = ['cat', 'dog', 'rabbit'] wild_animals = ['tiger', 'fox'] animals.append(wild_animals) print('Updated animals list: ', animals) ```","title":"append()\u65b9\u6cd5\u5c06\u4e00\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002"},{"location":"#gmpy2","text":"","title":"gmpy2\u7528\u6cd5"},{"location":"#mpz","text":"","title":"mpz\uff08\uff09\u521d\u59cb\u5316\u5927\u6574\u6570\u3002"},{"location":"#sympynextprime-n","text":"","title":"sympy.nextprime() \u51fd\u6570\u83b7\u53d6\u7ed9\u5b9a\u6570\u5b57 n \u7684\u4e0b\u4e00\u4e2a\u8d28\u6570\u3002"},{"location":"#gmpy2mpfrx-x","text":"","title":"gmpy2.mpfr(x)# \u521d\u59cb\u5316\u4e00\u4e2a\u9ad8\u7cbe\u5ea6\u6d6e\u70b9\u6570x"},{"location":"#d-gmpy2inverten-de-1-mod-n","text":"","title":"d = gmpy2.invert(e,n) # \u6c42\u9006\u5143\uff0cde = 1 mod n"},{"location":"#c-gmpy2powmodmen-c-me-mod-n","text":"","title":"C = gmpy2.powmod(M,e,n)# \u5e42\u53d6\u6a21\uff0c\u7ed3\u679c\u662f C = (M^e) mod n"},{"location":"#gmpy2is_primen","text":"","title":"gmpy2.is_prime(n) #\u7d20\u6027\u68c0\u6d4b"},{"location":"#gmpy2gcdab","text":"","title":"gmpy2.gcd(a,b)  #\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff0c\u6700\u5927\u516c\u7ea6\u6570"},{"location":"#gmpy2gcdextab","text":"","title":"gmpy2.gcdext(a,b)  #\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"#gmpy2irootab-abgmpyroota-b-x-y-x-a-b-y-x-ify1x","text":"","title":"gmpy2.iroot(a,b) #a\u5f00b\u6b21\u6839gmpy.root(a, b)\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y)\uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0cy \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf if(y==1)\u5219x\u4e3a\u6574\u6570"},{"location":"#_7","text":"","title":"\u5b9e\u9645\u5b66\u4e60\u4e2d\u95ee\u9898\uff1a"},{"location":"#1","text":"py flag = '' for i in range(0,len(key)): ch = chr(ord(sec[i])^ord(key[i])) flag + = ch print(flag)","title":"1.\u7f29\u8fdb\u3002\u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u7f29\u8fdb\u5fc5\u987b\u4e00\u81f4,\u9000\u51fa\u6539\u4ee3\u7801\u5757\u5c31\u9876\u683c\u3002"},{"location":"#2def-mainfor-i-in-range","text":"","title":"2.\u5192\u53f7.\u8bb0\u5f97\u5728\u67d0\u547d\u4ee4\u540e\u52a0\u5192\u53f7,\u5982def main():for i in range ():\u8868\u793a\u5f00\u59cb\u67d0\u51fd\u6570\u6216\u4ee3\u7801\u5757"},{"location":"#3uncoiode","text":"","title":"3.\u8bfb\u53d6\u6587\u4ef6\u67d0\u8def\u5f84\u62a5\u9519\u5565uncoiode"},{"location":"#_8","text":"\u5728\u8def\u5f84\u524d\u9762\u52a0r\uff0c\u4fdd\u6301\u5b57\u7b26\u539f\u59cb\u503c\u3002 \u66ff\u6362\u4e3a\u53cc\u53cd\u659c\u6760(\\\\ )\u6216\u6b63\u659c\u6760(/)\u3002","title":"\u89e3\u51b3\u529e\u6cd5\uff1a"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/","text":"RSA\u57fa\u672c\u9898\u578b RSA\u7b97\u6cd5\u6d89\u53ca\u4e09\u4e2a\u53c2\u6570,n,e,d\uff0c\u5176\u4e2d\u5206\u4e3a\u79c1\u94a5\u548c\u516c\u94a5\uff0c\u79c1\u94a5\u662fn,d\uff0c\u516c\u94a5\u662fn,e n\u662f\u4e24\u4e2a\u7d20\u6570\u7684\u4e58\u79ef\uff0c\u4e00\u822c\u8fd9\u4e24\u4e2a\u7d20\u6570\u5728RSA\u4e2d\u7528\u5b57\u6bcdp,q\u8868\u793a e\u662f\u4e00\u4e2a\u7d20\u6570 d\u662fe\u6a21 varphi(n) \u7684\u9006\u5143\uff0cCTF\u7684\u89d2\u5ea6\u770b\u5c31\u662f\uff0cd\u662f\u7531e,p,q\u53ef\u4ee5\u6c42\u89e3\u51fa\u7684 \u4e00\u822cCTF\u5c31\u662f\u628a\u6211\u4eec\u60f3\u8981\u83b7\u5f97\u7684flag\u4f5c\u4e3a\u660e\u6587\uff0cRSA\u4e2d\u8868\u793a\u4e3am\u3002\u7136\u540e\u901a\u8fc7RSA\u52a0\u5bc6\uff0c\u5f97\u5230\u5bc6\u6587\uff0cRSA\u4e2d\u8868\u793a\u4e3aC\u3002 \u52a0\u5bc6\u8fc7\u7a0b c=me mod n c=pow(m,e,n) \u89e3\u5bc6\u8fc7\u7a0b m=cd mod n m=pow(c,d,n) \u6c42\u89e3\u79c1\u94a5d d = gmpy2.invert(e, (p-1)*(q-1)) \u5df2\u77e5e,n,c \u601d\u8def\uff1a\u5148\u5c1d\u8bd5\u5206\u89e3n\uff08n\u5c0f\u7528\u811a\u672c\uff0cn\u5927\u7528yafu\u548c\u5728\u7ebf\u7f51\u7ad9\uff09 n\u80fd\u5206\u89e3\u6210\u4e24\u7d20\u6570p\u3001q yafu\u5206\u89e3\u5927\u6570\u4f7f\u7528 \uff1a 1.\u5728yafu\u540c\u680f\u6587\u4ef6\u5939\u5efa\u4e00\u4e2a1.txt\u3002 \u200b 2.\u628an\u653e\u8fdb\u53bb\uff0c\u6362\u884c\u4fdd\u5b58\u3002 \u200b 3.cmd\u6253\u5f00yafu\u3002 \u5f97\u5230p\uff0cq\uff0c\u4e0a\u811a\u672c n\u4e0d\u80fd\u5206\u89e3\u6210\u4e24\u7d20\u6570\uff08\u8003\u5bdf\u6b27\u62c9\u51fd\u6570\uff09 \u7b2c\u4e00\u79cd\u60c5\u51b5 \u5982\u679cn=1\uff0c\u5219 \u03c6(1) = 1 \u3002\u56e0\u4e3a1\u4e0e\u4efb\u4f55\u6570\uff08\u5305\u62ec\u81ea\u8eab\uff09\u90fd\u6784\u6210\u4e92\u8d28\u5173\u7cfb\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 \u5982\u679cn\u662f\u8d28\u6570\uff0c\u5219 \u03c6(n)=n-1 \u3002\u56e0\u4e3a\u8d28\u6570\u4e0e\u5c0f\u4e8e\u5b83\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u90fd\u6784\u6210\u4e92\u8d28\u5173\u7cfb\u3002\u6bd4\u59825\u4e0e1\u30012\u30013\u30014\u90fd\u6784\u6210\u4e92\u8d28\u5173\u7cfb\u3002 \u7b2c\u4e09\u79cd\u60c5\u51b5 \u5982\u679cn\u662f\u8d28\u6570\u7684\u67d0\u4e00\u4e2a\u6b21\u65b9\uff0c\u5373 n = pk (p\u4e3a\u8d28\u6570\uff0ck\u4e3a\u5927\u4e8e\u7b49\u4e8e1\u7684\u6574\u6570)\uff0c\u5219 \u6bd4\u5982 \u03c6(8) = \u03c6(23) =23 - 22 = 8 -4 = 4\u3002 \u8fd9\u662f\u56e0\u4e3a\u53ea\u6709\u5f53\u4e00\u4e2a\u6570\u4e0d\u5305\u542b\u8d28\u6570p\uff0c\u624d\u53ef\u80fd\u4e0en\u4e92\u8d28\u3002\u800c\u5305\u542b\u8d28\u6570p\u7684\u6570\u4e00\u5171\u6709pk-1\u4e2a\uff0c\u53731\u00d7p\u30012\u00d7p\u30013\u00d7p\u3001...\u3001pk-1\u00d7p\uff0c\u628a\u5b83\u4eec\u53bb\u9664\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4e0en\u4e92\u8d28\u7684\u6570\u3002 \u4e0a\u9762\u7684\u5f0f\u5b50\u8fd8\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u4e0a\u9762\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f k=1 \u65f6\u7684\u7279\u4f8b\u3002 \u7b2c\u56db\u79cd\u60c5\u51b5 \u5982\u679cn\u53ef\u4ee5\u5206\u89e3\u6210\u4e24\u4e2a\u4e92\u8d28\u7684\u6574\u6570\u4e4b\u79ef\uff0c n = p1 \u00d7 p2 \u5219 \u03c6(n) = \u03c6(p1p2) = \u03c6(p1)\u03c6(p2) \u5373\u79ef\u7684\u6b27\u62c9\u51fd\u6570\u7b49\u4e8e\u5404\u4e2a\u56e0\u5b50\u7684\u6b27\u62c9\u51fd\u6570\u4e4b\u79ef\u3002\u6bd4\u5982\uff0c\u03c6(56)=\u03c6(8\u00d77)=\u03c6(8)\u00d7\u03c6(7)=4\u00d76=24\u3002 \u8fd9\u4e00\u6761\u7684\u8bc1\u660e\u8981\u7528\u5230 \"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\" \uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u53ea\u7b80\u5355\u8bf4\u4e00\u4e0b\u601d\u8def\uff1a\u5982\u679ca\u4e0ep1\u4e92\u8d28(a<p1)\uff0cb\u4e0ep2\u4e92\u8d28(b<p2)\uff0cc\u4e0ep1p2\u4e92\u8d28(c<p1p2)\uff0c\u5219c\u4e0e\u6570\u5bf9 (a,b) \u662f\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u3002\u7531\u4e8ea\u7684\u503c\u6709\u03c6(p1)\u79cd\u53ef\u80fd\uff0cb\u7684\u503c\u6709\u03c6(p2)\u79cd\u53ef\u80fd\uff0c\u5219\u6570\u5bf9 (a,b) \u6709\u03c6(p1)\u03c6(p2)\u79cd\u53ef\u80fd\uff0c\u800cc\u7684\u503c\u6709\u03c6(p1p2)\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u03c6(p1p2)\u5c31\u7b49\u4e8e\u03c6(p1)\u03c6(p2)\u3002 \u7b2c\u4e94\u79cd\u60c5\u51b5 \u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5927\u4e8e1\u7684\u6b63\u6574\u6570\uff0c\u90fd\u53ef\u4ee5\u5199\u6210\u4e00\u7cfb\u5217\u8d28\u6570\u7684\u79ef\u3002 \u6839\u636e\u7b2c4\u6761\u7684\u7ed3\u8bba\uff0c\u5f97\u5230 \u518d\u6839\u636e\u7b2c3\u6761\u7684\u7ed3\u8bba\uff0c\u5f97\u5230 \u4e5f\u5c31\u7b49\u4e8e dp\u3001dq\u6cc4\u9732 \u7279\u70b9\uff1a\u5df2\u77e5dp\u3001dq \u516c\u5f0f mp=pow(c,dp,p)mq=pow(c,dq,q)i=1+kq\u200amod\u200ap(i\u662fp\u3001q\u7684\u9006\u5143)m=(mp+i\u2217(mq\u2212mp)\u2217p)\u200amod\u200an\\mathrm{mp}= \\mathrm{pow}\\left(c, dp, p\\right) \\\\mathrm{mq}= \\mathrm{pow}\\left(c, dq, q\\right) \\\\mathrm{i}= 1 + kq \\bmod p(i\u662fp\u3001q\u7684\u9006\u5143) \\\\mathrm{m}= (mp + i (mq - mp) p) \\bmod nmp=pow(c,dp,p)mq=pow(c,dq,q)i=1+kqmodp(i\u662fp\u3001q\u7684\u9006\u5143)m=(mp+i\u2217(mq\u2212mp)\u2217p)modn import gmpy2 p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 I=gmpy2.invert(p,q)#\u6c42\u51fap\u7684\u9006\u5143 mp=gmpy2.powmod(c,dp,p) mq=gmpy2.powmod(c,dq,q)#\u6c42mp\uff0cmq m=(mp+i*(mq-mp)*p)%n m=hex(m)[2:]#\u628am\u8f6c\u621016\u8fdb\u5236\uff0c\u4ece\u7b2c\u4e09\u4e2a\u5b57\u7b26\u8f93\u51fa\uff08\u53bb\u63890x\uff09 flag='' for i in range(len(m)//2)\uff1a flag +=char(int(m[i*2:(i+1)*2],16))#\u628am\u4e24\u4e2a\u4e00\u7ec416\u8fdb\u5236\u8f6c\u5316\u5b57\u7b26\u4e32 print(flag) dp\u6cc4\u9732 \u7279\u70b9\uff1a\u5df2\u77e5dp \u601d\u8def\uff1a dp=d\u200amod\u200a(p\u22121)\\mathrm{dp}= d \\bmod (p - 1)dp=dmod(p\u22121) #### \u904d\u5386\u6c42\u51fap import gmpy2 e = 65537 n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113 dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657 c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751 for i in range(1,65537): if(dp*e-1)%i==0: if n%((dp*e-1)//i+1)==0: p = (dp * e-1)//i+1 q = n//((dp*e-1)//i+1) phi=(p-1)*(q-1);d=gmpy2.invert(e,phi) m=pow(c,d,n) print(bytes.fromhex(hex(m)[2:])) \u5171\u6a21\u653b\u51fb \u7279\u70b9\uff1a\u540c\u4e00\u4e2an\uff0c\u591a\u7ec4c\u3001e import gmpy2 import binascii c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361 n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801 e1=11187289 c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397 e2=9647291 #\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 r,s1,s2=gmpy2.gcdext(e1,e2) m=pow(c1,s1,n)*pow(c2,s2,n)%n m=hex(m)[2:] print(binascii.unhexlify(m)) \u4f4e\u52a0\u5bc6\u6307\u6570\u5c0f\u660e\u6587\u653b\u51fb\uff08Dangerous RSA\uff09 \u7279\u70b9\uff1a e=3 \u516c\u5f0f\u63a8\u5bfc import gmpy2 import libnum n= 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793 c= 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 e=0x3 k=0 while 1: if(gmpy2.iroot(c+k*n,3)[1]==True): print(gmpy2.iroot(c+k*n,3))#gmpy.root(a, b)\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y)\uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0cy \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf break k=k+1 m=13040004482819713819817340524563023159919305047824600478799740488797710355579494486728991357 print(libnum.n2s(m)) \u4f4e\u52a0\u5bc6\u6307\u6570\u5e7f\u64ad\u653b\u51fb\uff08buuctf RSA5\uff09 \u7279\u70b9: \u52a0\u5bc6\u6307\u6570e\u5f88\u5c0f \u4e00\u4efd\u660e\u6587\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u6570n\u548c\u76f8\u540c\u7684\u52a0\u5bc6\u6307\u6570e\u5f97\u4e0d\u540c\u5bc6\u6587c\u3002 \u53ef\u4ee5\u5c1d\u8bd5\u662f\u5426\u4e0d\u540c\u7684n\u4e4b\u95f4\u662f\u5426\u6709\u6700\u5c0f\u516c\u500d\u6570p\uff0c\u89e3\u51fap\u3001q import gmpy2 import libnum e = 65537 n0 = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207 c0 = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320 n1 = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759 c1 = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855 n2= 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491 c2= 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862 n3= 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751 c3= 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613 n4= 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067 c4= 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357 n5= 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369 c5= 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932 n6= 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137 c6= 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179 n7= 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191 c7= 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006 n8= 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941 c8= 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934 n9= 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491 c9= 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869 n10= 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019 c10= 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467 n11= 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299 c11= 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971 n12= 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551 c12= 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175 n13= 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987 c13= 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457 n14= 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837 c14= 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842 n15= 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451 c15= 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724 n16= 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499 c16= 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024 n17= 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973 c17= 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887 n18= 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603 c18= 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889 n19= 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659 c19= 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346 n=[n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19] c=[c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19] for i in range(len(n)): for j in range(len(c)): if(i!=j): if(gmpy2.gcd(n[i],n[j])!=1): print(i,j) p=gmpy2.gcd(n[i],n[j]) q=n[i]//p d=gmpy2.invert(e,(P-1)*(q-1)) m=gmpy2.powmod(c[i],d,n[i]) print(libnum.n2s.(int(m))) \u7ef4\u7eb3\u653b\u51fb \u7279\u70b9\uff1ae\u5f88\u5927\u6216\u5f88\u5c0f \u7528\u7ef4\u7eb3\u653b\u51fb\u5305\u53ef\u5728\u77e5n\uff0ce\uff0c\u60c5\u51b5\u4e0b\u76f4\u63a5\u5f97\u5230d\u3002 \u7ef4\u7eb3\u653b\u51fb\u5305\u4e0b\u8f7d(https://github.com/pablocelayes/rsa-wiener-attack),\u628a\u538b\u7f29\u5305\u4e2d\u6240\u6709py\u6587\u4ef6\u653e\u5230Python37\\Lib\\site-packages\u4e0b\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\u3002 form RSAwienHackr import hacker_RSA n= e= d=hacker_RSA(e,n) print(d) \u6316\u4e2a\u5751\uff1a\u540e\u7eed\u9700\u8981\u5b66\u4e60\u7ef4\u7eb3\u653b\u51fb\u7684\u539f\u7406 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406([BJDCTF2020]rsa_output) \u7279\u70b9\uff1a\u7ed9\u51fa\u591a\u7ec4n\u3001c\u3002 \u63a8\u5bfc\u516c\u5f0f c=pow(m,e,n)M=n1\u2217n2\u2217n3M1=Mn1M2=Mn2M3=Mn3M1\u2217t1mod(n1)=1M2\u2217t2mod(n2)=1M3\u2217t3mod(n3)=1m=(c1\u2217M1\u2217t1+c2\u2217M2\u2217t2+c3\u2217M3\u2217t3)\u200amod\u200aM\\mathrm{c}= \\mathrm{pow}\\left(m, e, n\\right) \\\\mathrm{M}= n1 n2 n3 \\\\mathrm{M1}= \\frac{M}{n1} \\\\mathrm{M2}= \\frac{M}{n2} \\\\mathrm{M3}= \\frac{M}{n3} \\\\mathrm{M1 t1 mod(n1)}= 1 \\\\mathrm{M2 t2 mod(n2)}= 1 \\\\mathrm{M3 t3 mod(n3)}= 1 \\\\mathrm{m}= (c1 M1 t1 + c2 M2 t2 + c3 M3*t3) \\bmod Mc=pow(m,e,n)M=n1\u2217n2\u2217n3M1=n1MM2=n2MM3=n3MM1\u2217t1mod(n1)=1M2\u2217t2mod(n2)=1M3\u2217t3mod(n3)=1m=(c1\u2217M1\u2217t1+c2\u2217M2\u2217t2+c3\u2217M3\u2217t3)modM ok,\u63a8\u7406\u7ed3\u675f\uff0c\u5199\u811a\u672c\u3002 \u8fd9\u9898\u7ed9\u7684\u6570\u636e\u90fd\u662f5\u8fdb\u5236\u8981\u8f6c\u6362\u3002 import gmpy2 import libnum N0 = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 ccc2 = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242 n1=int(str(N0),5);C1=int(str(c0),5) n2=int(str(N1),5);C2=int(str(c1),5) n3=int(str(N2),5);C3=int(str(c2),5)#\u8f6c\u6362\u621010\u8fdb\u5236 M=n1*n2*n3 M1=M//n1;M2=M//n2;M3=M//m3 t1=gmpy2.invert(M1,n1);t2=gmpy2.invert(M2,n2);t3=gmpy2.invert(M3,n3) x=M1*t1*C1+M2*t2*C2+M3*t3*C3 #\u6c42\u51fam^e,\u7136\u540e\u904d\u5386\u6c42e for i in range(2,10): if(gmpy2.iroot(x,i)[1]==True): print(i) e=3 m=gmpy2.iroot(x,e) m=259362307225540148883586283191025214233097658309244310540770399135748418469298031742173624766441014006294782333 print(libnum.n2s(int(m))) \u5df2\u77e5d\u3001e\u3001c\uff08[NCTF2019]babyRSA\uff09 \u539f\u7406: d\u2217emod(p\u22121)\u2217(q\u22121)=1d\u2217e\u22121=k\u2217(p\u22121)\u2217(q\u22121)\\mathrm{d e mod(p-1) (q-1)}= 1\\ \\mathrm{d e-1}= k (p - 1)*(q - 1)d\u2217emod(p\u22121)\u2217(q\u22121)=1d\u2217e\u22121=k\u2217(p\u22121)\u2217(q\u22121) \u601d\u8def\uff1a\u7206\u7834\u6c42\u6b27\u62c9\u51fd\u6570\u8fdb\u800c\u6c42p\u548cq \u53d1\u73b0p\u662f1024\u4f4d\u7d20\u6570\uff0cq\u662fp\u7684\u4e0b\u4e00\u4e2a\u7d20\u6570\uff0c\u5219q\u4e5f\u4e3a1024\u4f4d\uff0c(p-1)*(q-1)\u662f2048\u4f4d\uff1b\u53c8\u7b97\u51fad * e-1\u662f2064\u4f4d \u6240\u4ee5k\u4e0d\u53ef\u80fd\u5927\u4e8e16\u4f4d\uff0c\u7136\u540e\u904d\u5386k\uff0c\u6c42\u89e3\u3002 import libnum import gmpy2 d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913 c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804 e =65537 f=bin(d*e-1)[2:] #print(len(f)) x=d*e-1 for k in range(pow(2,15),pow(2,16)): if(x%k==0): p=sympy.prevprime(gmpy2.iroot(x//k,2)[0]) q=sympy.nextprime(p) if((p-1)*(q-1)*k==x): break print(p,q) p = 143193611591752210918770476402384783351740028841763223236102885221839966637073188462808195974548579833368313904083095786906479416347681923731100260359652426441593107755892485944809419189348311956308456459523437459969713060653432909873986596042482699670451716296743727525586437248462432327423361080811225075839 q = 143193611591752210918770476402384783351740028841763223236102885221839966637073188462808195974548579833368313904083095786906479416347681923731100260359652426441593107755892485944809419189348311956308456459523437459969713060653432909873986596042482699670451716296743727525586437248462432327423361080811225076497 phi=(p-1)*(q-1) d=gmpy2.invert(e,phi) n=p*q m=pow(c,d,n) print(libnum.n2s(int(m)))","title":"RSA"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#rsa","text":"RSA\u7b97\u6cd5\u6d89\u53ca\u4e09\u4e2a\u53c2\u6570,n,e,d\uff0c\u5176\u4e2d\u5206\u4e3a\u79c1\u94a5\u548c\u516c\u94a5\uff0c\u79c1\u94a5\u662fn,d\uff0c\u516c\u94a5\u662fn,e n\u662f\u4e24\u4e2a\u7d20\u6570\u7684\u4e58\u79ef\uff0c\u4e00\u822c\u8fd9\u4e24\u4e2a\u7d20\u6570\u5728RSA\u4e2d\u7528\u5b57\u6bcdp,q\u8868\u793a e\u662f\u4e00\u4e2a\u7d20\u6570 d\u662fe\u6a21 varphi(n) \u7684\u9006\u5143\uff0cCTF\u7684\u89d2\u5ea6\u770b\u5c31\u662f\uff0cd\u662f\u7531e,p,q\u53ef\u4ee5\u6c42\u89e3\u51fa\u7684 \u4e00\u822cCTF\u5c31\u662f\u628a\u6211\u4eec\u60f3\u8981\u83b7\u5f97\u7684flag\u4f5c\u4e3a\u660e\u6587\uff0cRSA\u4e2d\u8868\u793a\u4e3am\u3002\u7136\u540e\u901a\u8fc7RSA\u52a0\u5bc6\uff0c\u5f97\u5230\u5bc6\u6587\uff0cRSA\u4e2d\u8868\u793a\u4e3aC\u3002 \u52a0\u5bc6\u8fc7\u7a0b c=me mod n c=pow(m,e,n) \u89e3\u5bc6\u8fc7\u7a0b m=cd mod n m=pow(c,d,n) \u6c42\u89e3\u79c1\u94a5d d = gmpy2.invert(e, (p-1)*(q-1))","title":"RSA\u57fa\u672c\u9898\u578b"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#enc","text":"","title":"\u5df2\u77e5e,n,c"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#nnnyafu","text":"","title":"\u601d\u8def\uff1a\u5148\u5c1d\u8bd5\u5206\u89e3n\uff08n\u5c0f\u7528\u811a\u672c\uff0cn\u5927\u7528yafu\u548c\u5728\u7ebf\u7f51\u7ad9\uff09"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#npq","text":"yafu\u5206\u89e3\u5927\u6570\u4f7f\u7528 \uff1a 1.\u5728yafu\u540c\u680f\u6587\u4ef6\u5939\u5efa\u4e00\u4e2a1.txt\u3002 \u200b 2.\u628an\u653e\u8fdb\u53bb\uff0c\u6362\u884c\u4fdd\u5b58\u3002 \u200b 3.cmd\u6253\u5f00yafu\u3002","title":"n\u80fd\u5206\u89e3\u6210\u4e24\u7d20\u6570p\u3001q"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#pq","text":"","title":"\u5f97\u5230p\uff0cq\uff0c\u4e0a\u811a\u672c"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#n","text":"\u7b2c\u4e00\u79cd\u60c5\u51b5 \u5982\u679cn=1\uff0c\u5219 \u03c6(1) = 1 \u3002\u56e0\u4e3a1\u4e0e\u4efb\u4f55\u6570\uff08\u5305\u62ec\u81ea\u8eab\uff09\u90fd\u6784\u6210\u4e92\u8d28\u5173\u7cfb\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 \u5982\u679cn\u662f\u8d28\u6570\uff0c\u5219 \u03c6(n)=n-1 \u3002\u56e0\u4e3a\u8d28\u6570\u4e0e\u5c0f\u4e8e\u5b83\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u90fd\u6784\u6210\u4e92\u8d28\u5173\u7cfb\u3002\u6bd4\u59825\u4e0e1\u30012\u30013\u30014\u90fd\u6784\u6210\u4e92\u8d28\u5173\u7cfb\u3002 \u7b2c\u4e09\u79cd\u60c5\u51b5 \u5982\u679cn\u662f\u8d28\u6570\u7684\u67d0\u4e00\u4e2a\u6b21\u65b9\uff0c\u5373 n = pk (p\u4e3a\u8d28\u6570\uff0ck\u4e3a\u5927\u4e8e\u7b49\u4e8e1\u7684\u6574\u6570)\uff0c\u5219 \u6bd4\u5982 \u03c6(8) = \u03c6(23) =23 - 22 = 8 -4 = 4\u3002 \u8fd9\u662f\u56e0\u4e3a\u53ea\u6709\u5f53\u4e00\u4e2a\u6570\u4e0d\u5305\u542b\u8d28\u6570p\uff0c\u624d\u53ef\u80fd\u4e0en\u4e92\u8d28\u3002\u800c\u5305\u542b\u8d28\u6570p\u7684\u6570\u4e00\u5171\u6709pk-1\u4e2a\uff0c\u53731\u00d7p\u30012\u00d7p\u30013\u00d7p\u3001...\u3001pk-1\u00d7p\uff0c\u628a\u5b83\u4eec\u53bb\u9664\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4e0en\u4e92\u8d28\u7684\u6570\u3002 \u4e0a\u9762\u7684\u5f0f\u5b50\u8fd8\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u4e0a\u9762\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f k=1 \u65f6\u7684\u7279\u4f8b\u3002 \u7b2c\u56db\u79cd\u60c5\u51b5 \u5982\u679cn\u53ef\u4ee5\u5206\u89e3\u6210\u4e24\u4e2a\u4e92\u8d28\u7684\u6574\u6570\u4e4b\u79ef\uff0c n = p1 \u00d7 p2 \u5219 \u03c6(n) = \u03c6(p1p2) = \u03c6(p1)\u03c6(p2) \u5373\u79ef\u7684\u6b27\u62c9\u51fd\u6570\u7b49\u4e8e\u5404\u4e2a\u56e0\u5b50\u7684\u6b27\u62c9\u51fd\u6570\u4e4b\u79ef\u3002\u6bd4\u5982\uff0c\u03c6(56)=\u03c6(8\u00d77)=\u03c6(8)\u00d7\u03c6(7)=4\u00d76=24\u3002 \u8fd9\u4e00\u6761\u7684\u8bc1\u660e\u8981\u7528\u5230 \"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\" \uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u53ea\u7b80\u5355\u8bf4\u4e00\u4e0b\u601d\u8def\uff1a\u5982\u679ca\u4e0ep1\u4e92\u8d28(a<p1)\uff0cb\u4e0ep2\u4e92\u8d28(b<p2)\uff0cc\u4e0ep1p2\u4e92\u8d28(c<p1p2)\uff0c\u5219c\u4e0e\u6570\u5bf9 (a,b) \u662f\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u3002\u7531\u4e8ea\u7684\u503c\u6709\u03c6(p1)\u79cd\u53ef\u80fd\uff0cb\u7684\u503c\u6709\u03c6(p2)\u79cd\u53ef\u80fd\uff0c\u5219\u6570\u5bf9 (a,b) \u6709\u03c6(p1)\u03c6(p2)\u79cd\u53ef\u80fd\uff0c\u800cc\u7684\u503c\u6709\u03c6(p1p2)\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u03c6(p1p2)\u5c31\u7b49\u4e8e\u03c6(p1)\u03c6(p2)\u3002 \u7b2c\u4e94\u79cd\u60c5\u51b5 \u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5927\u4e8e1\u7684\u6b63\u6574\u6570\uff0c\u90fd\u53ef\u4ee5\u5199\u6210\u4e00\u7cfb\u5217\u8d28\u6570\u7684\u79ef\u3002 \u6839\u636e\u7b2c4\u6761\u7684\u7ed3\u8bba\uff0c\u5f97\u5230 \u518d\u6839\u636e\u7b2c3\u6761\u7684\u7ed3\u8bba\uff0c\u5f97\u5230 \u4e5f\u5c31\u7b49\u4e8e","title":"n\u4e0d\u80fd\u5206\u89e3\u6210\u4e24\u7d20\u6570\uff08\u8003\u5bdf\u6b27\u62c9\u51fd\u6570\uff09"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#dpdq","text":"","title":"dp\u3001dq\u6cc4\u9732"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#dpdq_1","text":"","title":"\u7279\u70b9\uff1a\u5df2\u77e5dp\u3001dq"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_1","text":"mp=pow(c,dp,p)mq=pow(c,dq,q)i=1+kq\u200amod\u200ap(i\u662fp\u3001q\u7684\u9006\u5143)m=(mp+i\u2217(mq\u2212mp)\u2217p)\u200amod\u200an\\mathrm{mp}= \\mathrm{pow}\\left(c, dp, p\\right) \\\\mathrm{mq}= \\mathrm{pow}\\left(c, dq, q\\right) \\\\mathrm{i}= 1 + kq \\bmod p(i\u662fp\u3001q\u7684\u9006\u5143) \\\\mathrm{m}= (mp + i (mq - mp) p) \\bmod nmp=pow(c,dp,p)mq=pow(c,dq,q)i=1+kqmodp(i\u662fp\u3001q\u7684\u9006\u5143)m=(mp+i\u2217(mq\u2212mp)\u2217p)modn import gmpy2 p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 I=gmpy2.invert(p,q)#\u6c42\u51fap\u7684\u9006\u5143 mp=gmpy2.powmod(c,dp,p) mq=gmpy2.powmod(c,dq,q)#\u6c42mp\uff0cmq m=(mp+i*(mq-mp)*p)%n m=hex(m)[2:]#\u628am\u8f6c\u621016\u8fdb\u5236\uff0c\u4ece\u7b2c\u4e09\u4e2a\u5b57\u7b26\u8f93\u51fa\uff08\u53bb\u63890x\uff09 flag='' for i in range(len(m)//2)\uff1a flag +=char(int(m[i*2:(i+1)*2],16))#\u628am\u4e24\u4e2a\u4e00\u7ec416\u8fdb\u5236\u8f6c\u5316\u5b57\u7b26\u4e32 print(flag)","title":"\u516c\u5f0f"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#dp","text":"","title":"dp\u6cc4\u9732"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#dp_1","text":"","title":"\u7279\u70b9\uff1a\u5df2\u77e5dp"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_2","text":"dp=d\u200amod\u200a(p\u22121)\\mathrm{dp}= d \\bmod (p - 1)dp=dmod(p\u22121) #### \u904d\u5386\u6c42\u51fap import gmpy2 e = 65537 n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113 dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657 c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751 for i in range(1,65537): if(dp*e-1)%i==0: if n%((dp*e-1)//i+1)==0: p = (dp * e-1)//i+1 q = n//((dp*e-1)//i+1) phi=(p-1)*(q-1);d=gmpy2.invert(e,phi) m=pow(c,d,n) print(bytes.fromhex(hex(m)[2:]))","title":"\u601d\u8def\uff1a"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_3","text":"","title":"\u5171\u6a21\u653b\u51fb"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#nce","text":"import gmpy2 import binascii c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361 n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801 e1=11187289 c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397 e2=9647291 #\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 r,s1,s2=gmpy2.gcdext(e1,e2) m=pow(c1,s1,n)*pow(c2,s2,n)%n m=hex(m)[2:] print(binascii.unhexlify(m))","title":"\u7279\u70b9\uff1a\u540c\u4e00\u4e2an\uff0c\u591a\u7ec4c\u3001e"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#dangerous-rsa","text":"","title":"\u4f4e\u52a0\u5bc6\u6307\u6570\u5c0f\u660e\u6587\u653b\u51fb\uff08Dangerous RSA\uff09"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_4","text":"","title":"\u7279\u70b9\uff1a"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#e3","text":"","title":"e=3"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_5","text":"import gmpy2 import libnum n= 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793 c= 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 e=0x3 k=0 while 1: if(gmpy2.iroot(c+k*n,3)[1]==True): print(gmpy2.iroot(c+k*n,3))#gmpy.root(a, b)\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y)\uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0cy \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf break k=k+1 m=13040004482819713819817340524563023159919305047824600478799740488797710355579494486728991357 print(libnum.n2s(m))","title":"\u516c\u5f0f\u63a8\u5bfc"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#buuctf-rsa5","text":"","title":"\u4f4e\u52a0\u5bc6\u6307\u6570\u5e7f\u64ad\u653b\u51fb\uff08buuctf RSA5\uff09"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_6","text":"","title":"\u7279\u70b9:"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#e","text":"","title":"\u52a0\u5bc6\u6307\u6570e\u5f88\u5c0f"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#nec","text":"\u53ef\u4ee5\u5c1d\u8bd5\u662f\u5426\u4e0d\u540c\u7684n\u4e4b\u95f4\u662f\u5426\u6709\u6700\u5c0f\u516c\u500d\u6570p\uff0c\u89e3\u51fap\u3001q import gmpy2 import libnum e = 65537 n0 = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207 c0 = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320 n1 = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759 c1 = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855 n2= 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491 c2= 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862 n3= 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751 c3= 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613 n4= 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067 c4= 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357 n5= 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369 c5= 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932 n6= 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137 c6= 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179 n7= 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191 c7= 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006 n8= 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941 c8= 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934 n9= 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491 c9= 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869 n10= 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019 c10= 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467 n11= 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299 c11= 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971 n12= 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551 c12= 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175 n13= 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987 c13= 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457 n14= 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837 c14= 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842 n15= 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451 c15= 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724 n16= 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499 c16= 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024 n17= 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973 c17= 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887 n18= 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603 c18= 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889 n19= 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659 c19= 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346 n=[n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19] c=[c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19] for i in range(len(n)): for j in range(len(c)): if(i!=j): if(gmpy2.gcd(n[i],n[j])!=1): print(i,j) p=gmpy2.gcd(n[i],n[j]) q=n[i]//p d=gmpy2.invert(e,(P-1)*(q-1)) m=gmpy2.powmod(c[i],d,n[i]) print(libnum.n2s.(int(m)))","title":"\u4e00\u4efd\u660e\u6587\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u6570n\u548c\u76f8\u540c\u7684\u52a0\u5bc6\u6307\u6570e\u5f97\u4e0d\u540c\u5bc6\u6587c\u3002"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_7","text":"","title":"\u7ef4\u7eb3\u653b\u51fb"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#e_1","text":"\u7528\u7ef4\u7eb3\u653b\u51fb\u5305\u53ef\u5728\u77e5n\uff0ce\uff0c\u60c5\u51b5\u4e0b\u76f4\u63a5\u5f97\u5230d\u3002 \u7ef4\u7eb3\u653b\u51fb\u5305\u4e0b\u8f7d(https://github.com/pablocelayes/rsa-wiener-attack),\u628a\u538b\u7f29\u5305\u4e2d\u6240\u6709py\u6587\u4ef6\u653e\u5230Python37\\Lib\\site-packages\u4e0b\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\u3002 form RSAwienHackr import hacker_RSA n= e= d=hacker_RSA(e,n) print(d) \u6316\u4e2a\u5751\uff1a\u540e\u7eed\u9700\u8981\u5b66\u4e60\u7ef4\u7eb3\u653b\u51fb\u7684\u539f\u7406","title":"\u7279\u70b9\uff1ae\u5f88\u5927\u6216\u5f88\u5c0f"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#bjdctf2020rsa_output","text":"","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406([BJDCTF2020]rsa_output)"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#nc","text":"","title":"\u7279\u70b9\uff1a\u7ed9\u51fa\u591a\u7ec4n\u3001c\u3002"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_8","text":"c=pow(m,e,n)M=n1\u2217n2\u2217n3M1=Mn1M2=Mn2M3=Mn3M1\u2217t1mod(n1)=1M2\u2217t2mod(n2)=1M3\u2217t3mod(n3)=1m=(c1\u2217M1\u2217t1+c2\u2217M2\u2217t2+c3\u2217M3\u2217t3)\u200amod\u200aM\\mathrm{c}= \\mathrm{pow}\\left(m, e, n\\right) \\\\mathrm{M}= n1 n2 n3 \\\\mathrm{M1}= \\frac{M}{n1} \\\\mathrm{M2}= \\frac{M}{n2} \\\\mathrm{M3}= \\frac{M}{n3} \\\\mathrm{M1 t1 mod(n1)}= 1 \\\\mathrm{M2 t2 mod(n2)}= 1 \\\\mathrm{M3 t3 mod(n3)}= 1 \\\\mathrm{m}= (c1 M1 t1 + c2 M2 t2 + c3 M3*t3) \\bmod Mc=pow(m,e,n)M=n1\u2217n2\u2217n3M1=n1MM2=n2MM3=n3MM1\u2217t1mod(n1)=1M2\u2217t2mod(n2)=1M3\u2217t3mod(n3)=1m=(c1\u2217M1\u2217t1+c2\u2217M2\u2217t2+c3\u2217M3\u2217t3)modM ok,\u63a8\u7406\u7ed3\u675f\uff0c\u5199\u811a\u672c\u3002","title":"\u63a8\u5bfc\u516c\u5f0f"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#5","text":"import gmpy2 import libnum N0 = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 ccc2 = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242 n1=int(str(N0),5);C1=int(str(c0),5) n2=int(str(N1),5);C2=int(str(c1),5) n3=int(str(N2),5);C3=int(str(c2),5)#\u8f6c\u6362\u621010\u8fdb\u5236 M=n1*n2*n3 M1=M//n1;M2=M//n2;M3=M//m3 t1=gmpy2.invert(M1,n1);t2=gmpy2.invert(M2,n2);t3=gmpy2.invert(M3,n3) x=M1*t1*C1+M2*t2*C2+M3*t3*C3 #\u6c42\u51fam^e,\u7136\u540e\u904d\u5386\u6c42e for i in range(2,10): if(gmpy2.iroot(x,i)[1]==True): print(i) e=3 m=gmpy2.iroot(x,e) m=259362307225540148883586283191025214233097658309244310540770399135748418469298031742173624766441014006294782333 print(libnum.n2s(int(m)))","title":"\u8fd9\u9898\u7ed9\u7684\u6570\u636e\u90fd\u662f5\u8fdb\u5236\u8981\u8f6c\u6362\u3002"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#decnctf2019babyrsa","text":"","title":"\u5df2\u77e5d\u3001e\u3001c\uff08[NCTF2019]babyRSA\uff09"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#_9","text":"d\u2217emod(p\u22121)\u2217(q\u22121)=1d\u2217e\u22121=k\u2217(p\u22121)\u2217(q\u22121)\\mathrm{d e mod(p-1) (q-1)}= 1\\ \\mathrm{d e-1}= k (p - 1)*(q - 1)d\u2217emod(p\u22121)\u2217(q\u22121)=1d\u2217e\u22121=k\u2217(p\u22121)\u2217(q\u22121)","title":"\u539f\u7406:"},{"location":"RSA%E5%9F%BA%E6%9C%AC%E9%A2%98%E5%9E%8B/#pq_1","text":"\u53d1\u73b0p\u662f1024\u4f4d\u7d20\u6570\uff0cq\u662fp\u7684\u4e0b\u4e00\u4e2a\u7d20\u6570\uff0c\u5219q\u4e5f\u4e3a1024\u4f4d\uff0c(p-1)*(q-1)\u662f2048\u4f4d\uff1b\u53c8\u7b97\u51fad * e-1\u662f2064\u4f4d \u6240\u4ee5k\u4e0d\u53ef\u80fd\u5927\u4e8e16\u4f4d\uff0c\u7136\u540e\u904d\u5386k\uff0c\u6c42\u89e3\u3002 import libnum import gmpy2 d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913 c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804 e =65537 f=bin(d*e-1)[2:] #print(len(f)) x=d*e-1 for k in range(pow(2,15),pow(2,16)): if(x%k==0): p=sympy.prevprime(gmpy2.iroot(x//k,2)[0]) q=sympy.nextprime(p) if((p-1)*(q-1)*k==x): break print(p,q) p = 143193611591752210918770476402384783351740028841763223236102885221839966637073188462808195974548579833368313904083095786906479416347681923731100260359652426441593107755892485944809419189348311956308456459523437459969713060653432909873986596042482699670451716296743727525586437248462432327423361080811225075839 q = 143193611591752210918770476402384783351740028841763223236102885221839966637073188462808195974548579833368313904083095786906479416347681923731100260359652426441593107755892485944809419189348311956308456459523437459969713060653432909873986596042482699670451716296743727525586437248462432327423361080811225076497 phi=(p-1)*(q-1) d=gmpy2.invert(e,phi) n=p*q m=pow(c,d,n) print(libnum.n2s(int(m)))","title":"\u601d\u8def\uff1a\u7206\u7834\u6c42\u6b27\u62c9\u51fd\u6570\u8fdb\u800c\u6c42p\u548cq"},{"location":"about/","text":"\u5173\u4e8e\u6211 \u59d3\u540d\uff1a\u5218\u4f73\u7487 \u8eab\u4efd\uff1a\u5b66\u751f \u6765\u81ea\uff1a\u5c71\u897f \u5b66\u4e60\u5174\u8da3\uff1a\u5bc6\u7801\u5b66\u3001\u7f51\u9875\u3002 \u8054\u7cfb\u65b9\u5f0f\uff1aQQ \uff1a768644248","title":"\u5173\u4e8e\u6211"},{"location":"about/#_1","text":"","title":"\u5173\u4e8e\u6211"},{"location":"about/#_2","text":"","title":"\u59d3\u540d\uff1a\u5218\u4f73\u7487"},{"location":"about/#_3","text":"","title":"\u8eab\u4efd\uff1a\u5b66\u751f"},{"location":"about/#_4","text":"","title":"\u6765\u81ea\uff1a\u5c71\u897f"},{"location":"about/#_5","text":"","title":"\u5b66\u4e60\u5174\u8da3\uff1a\u5bc6\u7801\u5b66\u3001\u7f51\u9875\u3002"},{"location":"about/#qq-768644248","text":"","title":"\u8054\u7cfb\u65b9\u5f0f\uff1aQQ \uff1a768644248"}]}